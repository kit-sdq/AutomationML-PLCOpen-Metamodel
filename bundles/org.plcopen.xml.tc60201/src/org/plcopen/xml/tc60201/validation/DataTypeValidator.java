/**
 *
 * $Id$
 */
package org.plcopen.xml.tc60201.validation;

import org.eclipse.emf.ecore.EObject;

import org.plcopen.xml.tc60201.ArrayType;
import org.plcopen.xml.tc60201.DerivedType;
import org.plcopen.xml.tc60201.EnumType;
import org.plcopen.xml.tc60201.PointerType;
import org.plcopen.xml.tc60201.StringType;
import org.plcopen.xml.tc60201.SubrangeSignedType;
import org.plcopen.xml.tc60201.SubrangeUnsignedType;
import org.plcopen.xml.tc60201.VarListPlain;
import org.plcopen.xml.tc60201.WstringType;

/**
 * A sample validator interface for {@link org.plcopen.xml.tc60201.DataType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface DataTypeValidator {
	boolean validate();

	boolean validateBOOL(EObject value);
	boolean validateBYTE(EObject value);
	boolean validateWORD(EObject value);
	boolean validateDWORD(EObject value);
	boolean validateLWORD(EObject value);
	boolean validateSINT(EObject value);
	boolean validateINT(EObject value);
	boolean validateDINT(EObject value);
	boolean validateLINT(EObject value);
	boolean validateUSINT(EObject value);
	boolean validateUINT(EObject value);
	boolean validateUDINT(EObject value);
	boolean validateULINT(EObject value);
	boolean validateREAL(EObject value);
	boolean validateLREAL(EObject value);
	boolean validateTIME(EObject value);
	boolean validateDATE(EObject value);
	boolean validateDT(EObject value);
	boolean validateTOD(EObject value);
	boolean validateString(StringType value);
	boolean validateWstring(WstringType value);
	boolean validateANY(EObject value);
	boolean validateANYDERIVED(EObject value);
	boolean validateANYELEMENTARY(EObject value);
	boolean validateANYMAGNITUDE(EObject value);
	boolean validateANYNUM(EObject value);
	boolean validateANYREAL(EObject value);
	boolean validateANYINT(EObject value);
	boolean validateANYBIT(EObject value);
	boolean validateANYSTRING(EObject value);
	boolean validateANYDATE(EObject value);
	boolean validateArray(ArrayType value);
	boolean validateDerived(DerivedType value);
	boolean validateEnum(EnumType value);
	boolean validateStruct(VarListPlain value);
	boolean validateSubrangeSigned(SubrangeSignedType value);
	boolean validateSubrangeUnsigned(SubrangeUnsignedType value);
	boolean validatePointer(PointerType value);
}
