/**
 *
 * $Id$
 */
package org.plcopen.xml.tc60201.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import org.plcopen.xml.tc60201.ActionBlockType;
import org.plcopen.xml.tc60201.BlockType;
import org.plcopen.xml.tc60201.CoilType;
import org.plcopen.xml.tc60201.CommentType;
import org.plcopen.xml.tc60201.ConnectorType;
import org.plcopen.xml.tc60201.ContactType;
import org.plcopen.xml.tc60201.ContinuationType;
import org.plcopen.xml.tc60201.ErrorType;
import org.plcopen.xml.tc60201.InOutVariableType;
import org.plcopen.xml.tc60201.InVariableType;
import org.plcopen.xml.tc60201.JumpStepType;
import org.plcopen.xml.tc60201.JumpType;
import org.plcopen.xml.tc60201.LabelType;
import org.plcopen.xml.tc60201.LeftPowerRailType;
import org.plcopen.xml.tc60201.MacroStepType;
import org.plcopen.xml.tc60201.OutVariableType;
import org.plcopen.xml.tc60201.ReturnType;
import org.plcopen.xml.tc60201.RightPowerRailType;
import org.plcopen.xml.tc60201.SelectionConvergenceType;
import org.plcopen.xml.tc60201.SelectionDivergenceType;
import org.plcopen.xml.tc60201.SimultaneousConvergenceType;
import org.plcopen.xml.tc60201.SimultaneousDivergenceType;
import org.plcopen.xml.tc60201.StepType;
import org.plcopen.xml.tc60201.TransitionType1;
import org.plcopen.xml.tc60201.VendorElementType;

/**
 * A sample validator interface for {@link org.plcopen.xml.tc60201.SFCType1}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface SFCType1Validator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateComment(EList<CommentType> value);
	boolean validateError(EList<ErrorType> value);
	boolean validateConnector(EList<ConnectorType> value);
	boolean validateContinuation(EList<ContinuationType> value);
	boolean validateActionBlock(EList<ActionBlockType> value);
	boolean validateVendorElement(EList<VendorElementType> value);
	boolean validateBlock(EList<BlockType> value);
	boolean validateInVariable(EList<InVariableType> value);
	boolean validateOutVariable(EList<OutVariableType> value);
	boolean validateInOutVariable(EList<InOutVariableType> value);
	boolean validateLabel(EList<LabelType> value);
	boolean validateJump(EList<JumpType> value);
	boolean validateReturn(EList<ReturnType> value);
	boolean validateLeftPowerRail(EList<LeftPowerRailType> value);
	boolean validateRightPowerRail(EList<RightPowerRailType> value);
	boolean validateCoil(EList<CoilType> value);
	boolean validateContact(EList<ContactType> value);
	boolean validateStep(EList<StepType> value);
	boolean validateMacroStep(EList<MacroStepType> value);
	boolean validateJumpStep(EList<JumpStepType> value);
	boolean validateTransition(EList<TransitionType1> value);
	boolean validateSelectionDivergence(EList<SelectionDivergenceType> value);
	boolean validateSelectionConvergence(EList<SelectionConvergenceType> value);
	boolean validateSimultaneousDivergence(EList<SimultaneousDivergenceType> value);
	boolean validateSimultaneousConvergence(EList<SimultaneousConvergenceType> value);
}
